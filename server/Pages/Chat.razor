@page "/chat"
@inject RetrievalAugmentedGeneration RetrievalAugmentedGeneration
@inject BaselineChatGpt Baseline
@inject GlobalCostTracker CostTracker
@inject ElasticsearchService ElasticsearchService

<PageTitle>ChatGPT</PageTitle>

<h1>Augmented Retrieval Generation Playground</h1>

<EditForm Model="@this" OnSubmit="@SubmitAsync">
	<div class="form-group">
		<label>Prompt</label>
		<InputTextArea @bind-Value="Prompt" class="form-control" />
	</div>

@*	<div class="form-group">
		<label>Role</label>
		<InputSelect @bind-Value="selectedRole">
			<option value="">(Baseline)</option>
			<option value="@Roles.General">General</option>
			<option value="@Roles.Bible">Bible</option>
		</InputSelect>
	</div>
*@

	<div class="form-group">
		<label>Augmented Search Index</label>
		<InputSelect @bind-Value="selectedIndex">
			<option value="">(Baseline)</option>
			@foreach (var item in indices)
			{
				<option value="@item">@item</option>
			}
		</InputSelect>
	</div>

	<div class="form-group">
		<button type="submit" class="btn btn-primary" disabled="@SubmitDisabled">Submit</button>
	</div>

	<div class="form-group">
		<label>Response</label>
		<ResultsDiv @ref="results" />
	</div>

	<div class="form-group">
		Cost of last chat: $@lastCost
	</div>
</EditForm>

@code {
	private string Prompt { get; set; } = "";
	private bool SubmitDisabled { get; set; }
	private string selectedIndex = "";
	private string selectedRole = "";
	private IReadOnlyCollection<string> indices = Array.Empty<string>();
	private ResultsDiv? results;
	private decimal lastCost = 0;

	private async Task SubmitAsync()
	{
		SubmitDisabled = true;
		var (result, cost, referenceMap) = selectedIndex == "" ?
			await Baseline.RunAsync("", selectedRole, Prompt) :
			await RetrievalAugmentedGeneration.RunAsync(selectedIndex, selectedRole, Prompt);
		CostTracker.Add(cost);
		lastCost = cost;
		results?.Update(referenceMap, result);
		SubmitDisabled = false;
	}

	protected override async Task OnInitializedAsync()
	{
		indices = await ElasticsearchService.GetIndicesAsync();
	}
}
