@page "/"
@inject ResourceIndexer ResourceIndexer
@inject ElasticsearchService ElasticsearchService

<h1>Setup</h1>

<InputTextOnChanged @bind-Value="createIndexName" />
<button class="btn btn-primary" @onclick="CreateIndexAsync" disabled="@CreateIndexDisabled">Create Index</button>

<hr/>

<h2>Index the Bible</h2>

<p>Bible data always goes into the <code>bible</code> index.</p>

<button class="btn btn-primary" @onclick="IndexBibleAsync">Index Bible</button>

<h2>Index the Web</h2>

<InputSelect @bind-Value="selectedIndex">
    <option value="">Select Index</option>
    @foreach (var item in indices)
    {
        <option value="@item">@item</option>
    }
</InputSelect>

<InputTextOnChanged @bind-Value="uri" />

<button class="btn btn-primary" @onclick="IndexUrlAsync" disabled="@CannotIndexUri">Index Website</button>

<hr />

<p>Indexer status: @indexerStatus</p>

@code {
    private string createIndexName = "";
    private bool CreateIndexDisabled => createIndexName == "";

    private string indexerStatus = "";
    private IReadOnlyCollection<string> indices = Array.Empty<string>();
    private string selectedIndex = "";
    private bool SelectedIndexIsInvalid => selectedIndex == "";

    private string uri = "";
    private bool UriIsInvalid => uri == "";
    private bool CannotIndexUri => UriIsInvalid || SelectedIndexIsInvalid;

    private async Task CreateIndexAsync()
    {
        await ElasticsearchService.CreateIndexAsync(createIndexName);
        indices = await ElasticsearchService.GetIndicesAsync();
        createIndexName = "";
        indexerStatus = $"Created index {createIndexName}";
    }

    private async Task IndexBibleAsync()
    {
        await ElasticsearchService.DeleteIndexAsync("bible");
        await ElasticsearchService.CreateIndexAsync("bible");
        await ResourceIndexer.IndexBibleAsync(selectedIndex, new Progress<string>(report =>
        {
            indexerStatus = report;
            StateHasChanged();
        }));
    }

    private async Task IndexUrlAsync()
    {
        await ResourceIndexer.IndexUriAsync(selectedIndex, uri, new Progress<string>(report =>
        {
            indexerStatus = report;
            StateHasChanged();
        }));
    }

    protected override async Task OnInitializedAsync()
    {
        indices = await ElasticsearchService.GetIndicesAsync();
    }
}
