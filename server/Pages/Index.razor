@page "/"
@inject ResourceIndexer ResourceIndexer
@inject ElasticsearchService ElasticsearchService
@inject ILogger<Index> Logger
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<h1>Setup</h1>

<InputTextOnChanged @bind-Value="createIndexName" />
<button class="btn btn-primary" @onclick="CreateIndexAsync" disabled="@CreateIndexDisabled">Create Index</button>

<hr />

<h2>Index the Bible</h2>

<p>Bible data always goes into the <code>bible</code> index.</p>

<button class="btn btn-primary" @onclick="IndexBibleAsync">Index Bible</button>

<hr />

<h2>Index the Web</h2>

<InputSelect @bind-Value="selectedIndex">
    <option value="">Select Index</option>
    @foreach (var item in indices)
    {
        <option value="@item">@item</option>
    }
</InputSelect>

<InputTextOnChanged @bind-Value="uri" />

<button class="btn btn-primary" @onclick="IndexUriAsync" disabled="@CannotIndexUri">Index Website</button>

<hr />

<h2>Index PDF Files</h2>

<InputSelect @bind-Value="selectedIndex">
    <option value="">Select Index</option>
    @foreach (var item in indices)
    {
        <option value="@item">@item</option>
    }
</InputSelect>

<InputFile OnChange="IndexFilesAsync" multiple disabled="@SelectedIndexIsInvalid" />

<hr />

<p>Indexer status: @indexerStatus</p>

@code {
    private string createIndexName = "";
    private bool CreateIndexDisabled => createIndexName == "";

    private string indexerStatus = "";
    private IReadOnlyCollection<string> indices = Array.Empty<string>();
    private string selectedIndex = "";
    private bool SelectedIndexIsInvalid => selectedIndex == "";

    private string uri = "";
    private bool UriIsInvalid => uri == "";
    private bool CannotIndexUri => UriIsInvalid || SelectedIndexIsInvalid;

    private async Task CreateIndexAsync()
    {
        try
        {
            await ElasticsearchService.CreateIndexAsync(createIndexName);
            indices = await ElasticsearchService.GetIndicesAsync();
            createIndexName = "";
            indexerStatus = $"Created index {createIndexName}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Index creation failed.");
            indexerStatus = $"Failed: {ex}";
        }
    }

    private async Task IndexBibleAsync()
    {
        try
        {
            await ElasticsearchService.DeleteIndexAsync("bible");
            await ElasticsearchService.CreateIndexAsync("bible");
            await ResourceIndexer.IndexBibleAsync("bible", SimpleProgress());
            indexerStatus = "Done indexing Bible";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Indexing failed.");
            indexerStatus = $"Failed: {ex}";
        }
    }

    private async Task IndexUriAsync()
    {
        try
        {
            await ResourceIndexer.IndexUriAsync(selectedIndex, uri, SimpleProgress());
            indexerStatus = $"Done indexing {uri}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Indexing failed.");
            indexerStatus = $"Failed: {ex}";
        }
    }

    private async Task IndexFilesAsync(InputFileChangeEventArgs e)
    {
        try
        {
            var uploadFolder = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadFolder);
            var files = new List<(string Name, string Path, string Uri)>();
            foreach (var file in e.GetMultipleFiles(int.MaxValue))
            {
                indexerStatus = $"Uploading {file.Name}";
                var path = Path.Combine(uploadFolder, file.Name);
                using (var input = file.OpenReadStream(long.MaxValue))
                using (var output = File.Create(path))
                    await input.CopyToAsync(output);
                var uriBuilder = new UriBuilder(NavigationManager.Uri);
                uriBuilder.Path = $"uploads/{file.Name}";
                files.Add((file.Name, path, uriBuilder.Uri.ToString()));
            }

            foreach (var file in files)
            {
                await ResourceIndexer.IndexPdfAsync(selectedIndex, file.Name, file.Path, file.Uri, SimpleProgress());
            }

            indexerStatus = "Done indexing PDF files.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Indexing failed.");
            indexerStatus = $"Failed: {ex}";
        }
    }

    private IProgress<string> SimpleProgress() => new Progress<string>(report =>
    {
        indexerStatus = report;
        StateHasChanged();
    });

    protected override async Task OnInitializedAsync()
    {
        indices = await ElasticsearchService.GetIndicesAsync();
    }
}
