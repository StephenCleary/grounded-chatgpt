@page "/baseline"
@using Azure.AI.OpenAI;
@inject OpenAiClientProvider OpenAiClientProvider
@inject GlobalCostTracker CostTracker

<PageTitle>Baseline</PageTitle>

<h1>Out-of-the-box ChatGPT (3.5-turbo) Chat</h1>

<EditForm Model="@this" OnSubmit="@SubmitAsync">
	<div class="form-group">
		<label>Prompt</label>
		<InputTextArea @bind-Value="Prompt" class="form-control" />
	</div>

	<div class="form-group">
		<button type="submit" class="btn btn-primary" disabled="@SubmitDisabled">Submit</button>
	</div>

	<div class="form-group">
		<label>Response</label>
		<InputTextArea @bind-Value="Response" class="form-control" readonly="1" rows="13"/>
	</div>
</EditForm>

@code {
	private string Prompt { get; set; } = "";
	private string Response { get; set; } = "";
	private bool SubmitDisabled { get; set; }

	private async Task SubmitAsync()
	{
		// Just shoot it off to ChatGPT.

		if (OpenAiClientProvider.Client == null)
		{
			Response = "{No API key}";
			return;
		}

		Response = "";
		SubmitDisabled = true;
		var chatResponse = await OpenAiClientProvider.Client.GetChatCompletionsAsync(
			deploymentOrModelName: OpenAiClientProvider.Options!.Value.ChatDeployment,
			new ChatCompletionsOptions()
			{
				Messages =
				{
					new ChatMessage(ChatRole.User, Prompt),
				},
				Temperature = (float)0.7,
				MaxTokens = 800,
				NucleusSamplingFactor = (float)0.95,
				FrequencyPenalty = 0,
				PresencePenalty = 0,
			});
		var chatCompletions = chatResponse.Value;
		CostTracker.Add(OpenAiClientProvider.Options!.Value.ChatModel.Cost(chatCompletions.Usage.TotalTokens));
		var choice = chatCompletions.Choices.FirstOrDefault();
		Response = (choice == null) ? "{No choices returned.}" : choice.Message.Content;
		SubmitDisabled = false;
	}
}
