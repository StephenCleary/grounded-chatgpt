@page "/baseline"
@using Azure.AI.OpenAI;
@using Microsoft.Extensions.Options;
@inject OpenAIClient OpenAIClient
@inject GlobalCostTracker CostTracker
@inject IOptions<OpenAIOptions> OpenAIOptions

<PageTitle>Baseline</PageTitle>

<h1>Out-of-the-box ChatGPT (3.5-turbo) Chat</h1>

<InputTextArea @bind-Value="Prompt" />

<button class="btn btn-primary" @onclick="SubmitAsync">Submit</button>

<h2>Response:</h2>
<p>@Response</p>

@code {
	private string Prompt { get; set; } = "";
	private string Response { get; set; } = "";

	private async Task SubmitAsync()
	{
		// Just shoot it off to ChatGPT.

		var chatResponse = await OpenAIClient.GetChatCompletionsAsync(
			deploymentOrModelName: OpenAIOptions.Value.ChatDeployment,
			new ChatCompletionsOptions()
			{
				Messages =
				{
					new ChatMessage(ChatRole.User, Prompt),
				},
				Temperature = (float)0.7,
				MaxTokens = 800,
				NucleusSamplingFactor = (float)0.95,
				FrequencyPenalty = 0,
				PresencePenalty = 0,
			});
		var chatCompletions = chatResponse.Value;
		CostTracker.Add(OpenAIOptions.Value.ChatModel.Cost(chatCompletions.Usage.TotalTokens));
		var choice = chatCompletions.Choices.FirstOrDefault();
		Response = (choice == null) ? "{No choices returned.}" : $"{choice.Message.Role.Label}: {choice.Message.Content}";
	}
}
